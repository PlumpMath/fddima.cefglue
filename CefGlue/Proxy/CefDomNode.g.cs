//
// DO NOT MODIFY! THIS IS AUTOGENERATED FILE!
//
namespace CefGlue
{
    using System;
    using System.Diagnostics;
    using System.Runtime.InteropServices;
    using System.Threading;
    using Core;
	using Diagnostics;

    public sealed unsafe partial class CefDomNode : IDisposable
	{
#if DIAGNOSTICS
		internal static int ObjectCt;
#endif

        /// <summary>
        /// Create CefDomNode proxy from pointer.
        /// </summary>
        internal static CefDomNode From(cef_domnode_t* ptr)
        {
			return new CefDomNode(ptr, false);
        }

        /// <summary>
        /// Create CefDomNode proxy from pointer and optionally increments the reference count for the object.
        /// </summary>
        internal static CefDomNode Create(cef_domnode_t* ptr, bool addRefCount)
        {
            return new CefDomNode(ptr, addRefCount);
        }

        private cef_domnode_t* ptr;

        private CefDomNode(cef_domnode_t* ptr, bool addRefCount)
        {
            this.ptr = ptr;

#if DIAGNOSTICS
            Interlocked.Increment(ref ObjectCt);
            Cef.Logger.Trace(LogTarget.CefDomNode, this.ptr, LogOperation.Create);
#endif

			if (addRefCount) this.AddRef();
        }

        #region IDisposable
        ~CefDomNode()
        {
            Dispose(false);
        }

        public void Dispose()
        {
            Dispose(true);
            GC.SuppressFinalize(this);
        }

        private void Dispose(bool disposing)
        {
            if (this.ptr != null)
            {
                var refct = ReleaseRef();
#if DIAGNOSTICS
                var total = Interlocked.Decrement(ref ObjectCt);
                Cef.Logger.Trace(LogTarget.CefDomNode, this.ptr, LogOperation.Dispose, "RefCount=[{0}]", refct);
#endif
                this.ptr = null;
            }
        }
        #endregion

        private cef_base_t.add_ref_delegate add_ref
        {
            get
            {
                return (cef_base_t.add_ref_delegate)Marshal.GetDelegateForFunctionPointer(this.ptr->@base.add_ref, typeof(cef_base_t.add_ref_delegate));
            }
        }

        private cef_base_t.release_delegate release
        {
            get
            {
                return (cef_base_t.release_delegate)Marshal.GetDelegateForFunctionPointer(this.ptr->@base.release, typeof(cef_base_t.release_delegate));
            }
        }

        private cef_base_t.get_refct_delegate get_refct
        {
            get
            {
                return (cef_base_t.get_refct_delegate)Marshal.GetDelegateForFunctionPointer(this.ptr->@base.get_refct, typeof(cef_base_t.get_refct_delegate));
            }
        }

        /// <summary>
        /// The AddRef method increments the reference count for the object. It should
        /// be called for every new copy of a pointer to a given object. The resulting
        /// reference count value is returned and should be used for diagnostic/testing
        /// purposes only.
        /// </summary>
        internal int AddRef()
        {
            return add_ref(&this.ptr->@base);
        }

        /// <summary>
        /// The Release method decrements the reference count for the object. If the
        /// reference count on the object falls to 0, then the object should free
        /// itself from memory.  The resulting reference count value is returned and
        /// should be used for diagnostic/testing purposes only.
        /// </summary>
        internal int ReleaseRef()
        {
            return release(&this.ptr->@base);
        }

        /// <summary>
        /// Return the current number of references.
        /// </summary>
        internal int RefCount
        {
            get { return get_refct(&this.ptr->@base); }
        }

        internal cef_domnode_t* NativePointer
        {
            get
            {
                return this.ptr;
            }
        }

        internal cef_domnode_t* GetNativePointerAndAddRef()
        {
            AddRef();
            return this.ptr;
        }

        private cef_domnode_t.get_type_delegate get_type
        {
            get
            {
                return (cef_domnode_t.get_type_delegate)Marshal.GetDelegateForFunctionPointer(this.ptr->get_type, typeof(cef_domnode_t.get_type_delegate));
            }
        }

        private cef_domnode_t.is_text_delegate is_text
        {
            get
            {
                return (cef_domnode_t.is_text_delegate)Marshal.GetDelegateForFunctionPointer(this.ptr->is_text, typeof(cef_domnode_t.is_text_delegate));
            }
        }

        private cef_domnode_t.is_element_delegate is_element
        {
            get
            {
                return (cef_domnode_t.is_element_delegate)Marshal.GetDelegateForFunctionPointer(this.ptr->is_element, typeof(cef_domnode_t.is_element_delegate));
            }
        }

        private cef_domnode_t.is_same_delegate is_same
        {
            get
            {
                return (cef_domnode_t.is_same_delegate)Marshal.GetDelegateForFunctionPointer(this.ptr->is_same, typeof(cef_domnode_t.is_same_delegate));
            }
        }

        private cef_domnode_t.get_name_delegate get_name
        {
            get
            {
                return (cef_domnode_t.get_name_delegate)Marshal.GetDelegateForFunctionPointer(this.ptr->get_name, typeof(cef_domnode_t.get_name_delegate));
            }
        }

        private cef_domnode_t.get_value_delegate get_value
        {
            get
            {
                return (cef_domnode_t.get_value_delegate)Marshal.GetDelegateForFunctionPointer(this.ptr->get_value, typeof(cef_domnode_t.get_value_delegate));
            }
        }

        private cef_domnode_t.set_value_delegate set_value
        {
            get
            {
                return (cef_domnode_t.set_value_delegate)Marshal.GetDelegateForFunctionPointer(this.ptr->set_value, typeof(cef_domnode_t.set_value_delegate));
            }
        }

        private cef_domnode_t.get_as_markup_delegate get_as_markup
        {
            get
            {
                return (cef_domnode_t.get_as_markup_delegate)Marshal.GetDelegateForFunctionPointer(this.ptr->get_as_markup, typeof(cef_domnode_t.get_as_markup_delegate));
            }
        }

        private cef_domnode_t.get_document_delegate get_document
        {
            get
            {
                return (cef_domnode_t.get_document_delegate)Marshal.GetDelegateForFunctionPointer(this.ptr->get_document, typeof(cef_domnode_t.get_document_delegate));
            }
        }

        private cef_domnode_t.get_parent_delegate get_parent
        {
            get
            {
                return (cef_domnode_t.get_parent_delegate)Marshal.GetDelegateForFunctionPointer(this.ptr->get_parent, typeof(cef_domnode_t.get_parent_delegate));
            }
        }

        private cef_domnode_t.get_previous_sibling_delegate get_previous_sibling
        {
            get
            {
                return (cef_domnode_t.get_previous_sibling_delegate)Marshal.GetDelegateForFunctionPointer(this.ptr->get_previous_sibling, typeof(cef_domnode_t.get_previous_sibling_delegate));
            }
        }

        private cef_domnode_t.get_next_sibling_delegate get_next_sibling
        {
            get
            {
                return (cef_domnode_t.get_next_sibling_delegate)Marshal.GetDelegateForFunctionPointer(this.ptr->get_next_sibling, typeof(cef_domnode_t.get_next_sibling_delegate));
            }
        }

        private cef_domnode_t.has_children_delegate has_children
        {
            get
            {
                return (cef_domnode_t.has_children_delegate)Marshal.GetDelegateForFunctionPointer(this.ptr->has_children, typeof(cef_domnode_t.has_children_delegate));
            }
        }

        private cef_domnode_t.get_first_child_delegate get_first_child
        {
            get
            {
                return (cef_domnode_t.get_first_child_delegate)Marshal.GetDelegateForFunctionPointer(this.ptr->get_first_child, typeof(cef_domnode_t.get_first_child_delegate));
            }
        }

        private cef_domnode_t.get_last_child_delegate get_last_child
        {
            get
            {
                return (cef_domnode_t.get_last_child_delegate)Marshal.GetDelegateForFunctionPointer(this.ptr->get_last_child, typeof(cef_domnode_t.get_last_child_delegate));
            }
        }

        private cef_domnode_t.add_event_listener_delegate add_event_listener
        {
            get
            {
                return (cef_domnode_t.add_event_listener_delegate)Marshal.GetDelegateForFunctionPointer(this.ptr->add_event_listener, typeof(cef_domnode_t.add_event_listener_delegate));
            }
        }

        private cef_domnode_t.get_element_tag_name_delegate get_element_tag_name
        {
            get
            {
                return (cef_domnode_t.get_element_tag_name_delegate)Marshal.GetDelegateForFunctionPointer(this.ptr->get_element_tag_name, typeof(cef_domnode_t.get_element_tag_name_delegate));
            }
        }

        private cef_domnode_t.has_element_attributes_delegate has_element_attributes
        {
            get
            {
                return (cef_domnode_t.has_element_attributes_delegate)Marshal.GetDelegateForFunctionPointer(this.ptr->has_element_attributes, typeof(cef_domnode_t.has_element_attributes_delegate));
            }
        }

        private cef_domnode_t.has_element_attribute_delegate has_element_attribute
        {
            get
            {
                return (cef_domnode_t.has_element_attribute_delegate)Marshal.GetDelegateForFunctionPointer(this.ptr->has_element_attribute, typeof(cef_domnode_t.has_element_attribute_delegate));
            }
        }

        private cef_domnode_t.get_element_attribute_delegate get_element_attribute
        {
            get
            {
                return (cef_domnode_t.get_element_attribute_delegate)Marshal.GetDelegateForFunctionPointer(this.ptr->get_element_attribute, typeof(cef_domnode_t.get_element_attribute_delegate));
            }
        }

        private cef_domnode_t.get_element_attributes_delegate get_element_attributes
        {
            get
            {
                return (cef_domnode_t.get_element_attributes_delegate)Marshal.GetDelegateForFunctionPointer(this.ptr->get_element_attributes, typeof(cef_domnode_t.get_element_attributes_delegate));
            }
        }

        private cef_domnode_t.set_element_attribute_delegate set_element_attribute
        {
            get
            {
                return (cef_domnode_t.set_element_attribute_delegate)Marshal.GetDelegateForFunctionPointer(this.ptr->set_element_attribute, typeof(cef_domnode_t.set_element_attribute_delegate));
            }
        }

        private cef_domnode_t.get_element_inner_text_delegate get_element_inner_text
        {
            get
            {
                return (cef_domnode_t.get_element_inner_text_delegate)Marshal.GetDelegateForFunctionPointer(this.ptr->get_element_inner_text, typeof(cef_domnode_t.get_element_inner_text_delegate));
            }
        }

    }
}
