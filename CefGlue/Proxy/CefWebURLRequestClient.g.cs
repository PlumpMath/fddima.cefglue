//
// DO NOT MODIFY! THIS IS AUTOGENERATED FILE!
//
namespace CefGlue
{
    using System;
    using System.Diagnostics;
    using System.Runtime.InteropServices;
    using System.Threading;
    using Core;
	using Diagnostics;

    public sealed unsafe partial class CefWebUrlRequestClient : IDisposable
	{
#if DIAGNOSTICS
		internal static int ObjectCt;
#endif

        /// <summary>
        /// Create CefWebUrlRequestClient proxy from pointer.
        /// </summary>
        internal static CefWebUrlRequestClient FromPointer(cef_web_urlrequest_client_t* ptr)
        {
			return new CefWebUrlRequestClient(ptr, false);
        }

        /// <summary>
        /// Create CefWebUrlRequestClient proxy from pointer and optionally increments the reference count for the object.
        /// </summary>
        internal static CefWebUrlRequestClient Create(cef_web_urlrequest_client_t* ptr, bool addRefCount)
        {
            return new CefWebUrlRequestClient(ptr, addRefCount);
        }

        private cef_web_urlrequest_client_t* ptr;

        private CefWebUrlRequestClient(cef_web_urlrequest_client_t* ptr, bool addRefCount)
        {
            this.ptr = ptr;

#if DIAGNOSTICS
            Interlocked.Increment(ref ObjectCt);
            Cef.Logger.Trace(LogTarget.CefWebUrlRequestClient, this.ptr, LogOperation.Create);
#endif

			if (addRefCount) this.AddRef();
        }

        #region IDisposable
        ~CefWebUrlRequestClient()
        {
            Dispose(false);
        }

        public void Dispose()
        {
            Dispose(true);
            GC.SuppressFinalize(this);
        }

        private void Dispose(bool disposing)
        {
            if (this.ptr != null)
            {
                var refct = ReleaseRef();
#if DIAGNOSTICS
                var total = Interlocked.Decrement(ref ObjectCt);
                Cef.Logger.Trace(LogTarget.CefWebUrlRequestClient, this.ptr, LogOperation.Dispose, "RefCount=[{0}]", refct);
#endif
                this.ptr = null;
            }
        }
        #endregion

        private cef_base_t.add_ref_delegate add_ref
        {
            get
            {
                return (cef_base_t.add_ref_delegate)Marshal.GetDelegateForFunctionPointer(this.ptr->@base.add_ref, typeof(cef_base_t.add_ref_delegate));
            }
        }

        private cef_base_t.release_delegate release
        {
            get
            {
                return (cef_base_t.release_delegate)Marshal.GetDelegateForFunctionPointer(this.ptr->@base.release, typeof(cef_base_t.release_delegate));
            }
        }

        private cef_base_t.get_refct_delegate get_refct
        {
            get
            {
                return (cef_base_t.get_refct_delegate)Marshal.GetDelegateForFunctionPointer(this.ptr->@base.get_refct, typeof(cef_base_t.get_refct_delegate));
            }
        }

        /// <summary>
        /// The AddRef method increments the reference count for the object. It should
        /// be called for every new copy of a pointer to a given object. The resulting
        /// reference count value is returned and should be used for diagnostic/testing
        /// purposes only.
        /// </summary>
        internal int AddRef()
        {
            return add_ref(&this.ptr->@base);
        }

        /// <summary>
        /// The Release method decrements the reference count for the object. If the
        /// reference count on the object falls to 0, then the object should free
        /// itself from memory.  The resulting reference count value is returned and
        /// should be used for diagnostic/testing purposes only.
        /// </summary>
        internal int ReleaseRef()
        {
            return release(&this.ptr->@base);
        }

        /// <summary>
        /// Return the current number of references.
        /// </summary>
        internal int RefCount
        {
            get { return get_refct(&this.ptr->@base); }
        }

        internal cef_web_urlrequest_client_t* NativePointer
        {
            get
            {
                return this.ptr;
            }
        }

        internal cef_web_urlrequest_client_t* GetNativePointerAndAddRef()
        {
            AddRef();
            return this.ptr;
        }

        private cef_web_urlrequest_client_t.on_state_change_delegate on_state_change
        {
            get
            {
                return (cef_web_urlrequest_client_t.on_state_change_delegate)Marshal.GetDelegateForFunctionPointer(this.ptr->on_state_change, typeof(cef_web_urlrequest_client_t.on_state_change_delegate));
            }
        }

        private cef_web_urlrequest_client_t.on_redirect_delegate on_redirect
        {
            get
            {
                return (cef_web_urlrequest_client_t.on_redirect_delegate)Marshal.GetDelegateForFunctionPointer(this.ptr->on_redirect, typeof(cef_web_urlrequest_client_t.on_redirect_delegate));
            }
        }

        private cef_web_urlrequest_client_t.on_headers_received_delegate on_headers_received
        {
            get
            {
                return (cef_web_urlrequest_client_t.on_headers_received_delegate)Marshal.GetDelegateForFunctionPointer(this.ptr->on_headers_received, typeof(cef_web_urlrequest_client_t.on_headers_received_delegate));
            }
        }

        private cef_web_urlrequest_client_t.on_progress_delegate on_progress
        {
            get
            {
                return (cef_web_urlrequest_client_t.on_progress_delegate)Marshal.GetDelegateForFunctionPointer(this.ptr->on_progress, typeof(cef_web_urlrequest_client_t.on_progress_delegate));
            }
        }

        private cef_web_urlrequest_client_t.on_data_delegate on_data
        {
            get
            {
                return (cef_web_urlrequest_client_t.on_data_delegate)Marshal.GetDelegateForFunctionPointer(this.ptr->on_data, typeof(cef_web_urlrequest_client_t.on_data_delegate));
            }
        }

        private cef_web_urlrequest_client_t.on_error_delegate on_error
        {
            get
            {
                return (cef_web_urlrequest_client_t.on_error_delegate)Marshal.GetDelegateForFunctionPointer(this.ptr->on_error, typeof(cef_web_urlrequest_client_t.on_error_delegate));
            }
        }

    }
}
