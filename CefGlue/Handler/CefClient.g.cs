//
// DO NOT MODIFY! THIS IS AUTOGENERATED FILE!
//
namespace CefGlue
{
    using System;
    using System.Diagnostics;
    using System.Runtime.InteropServices;
    using System.Threading;
    using Core;
    using Diagnostics;

    public abstract unsafe partial class CefClient : IDisposable
    {
#if DIAGNOSTICS
        internal static int ObjectCt;
#endif

        private static ObjectTable<CefClient> pointers = new ObjectTable<CefClient>();

        /// <summary>
        /// This is get object from pointer table, but note that this is works only when object passed to native side (i.e. RefCount > 0).
        /// </summary>
        internal static CefClient FromPointer(cef_client_t* pointer)
        {
#if DIAGNOSTICS
            Cef.Logger.Trace(LogTarget.CefClient, pointer, "FromPointer");
#endif
            CefClient value;
            if (pointers.TryGetValue((IntPtr)pointer, out value))
            {
                value.ReleaseRef();
                return value;
            }
            throw new CefGlueException("CefClient not found.");
        }
		


        private int refct;
        private cef_client_t* ptr;
        private bool disposed;

        private cef_base_t.add_ref_delegate bs_add_ref;
        private cef_base_t.release_delegate bs_release;
        private cef_base_t.get_refct_delegate bs_get_refct;
        private cef_client_t.get_life_span_handler_delegate bs_get_life_span_handler;
        private cef_client_t.get_load_handler_delegate bs_get_load_handler;
        private cef_client_t.get_request_handler_delegate bs_get_request_handler;
        private cef_client_t.get_display_handler_delegate bs_get_display_handler;
        private cef_client_t.get_focus_handler_delegate bs_get_focus_handler;
        private cef_client_t.get_keyboard_handler_delegate bs_get_keyboard_handler;
        private cef_client_t.get_menu_handler_delegate bs_get_menu_handler;
        private cef_client_t.get_print_handler_delegate bs_get_print_handler;
        private cef_client_t.get_find_handler_delegate bs_get_find_handler;
        private cef_client_t.get_jsdialog_handler_delegate bs_get_jsdialog_handler;
        private cef_client_t.get_jsbinding_handler_delegate bs_get_jsbinding_handler;
        private cef_client_t.get_render_handler_delegate bs_get_render_handler;

        public CefClient()
        {
            this.refct = 0;
            this.ptr = cef_client_t.Alloc();
#if DIAGNOSTICS
			Interlocked.Increment(ref ObjectCt);
#endif

#if DIAGNOSTICS
            Cef.Logger.Trace(LogTarget.CefClient, this.ptr, LogOperation.Create);
#endif

            this.bs_add_ref = new cef_base_t.add_ref_delegate(this.add_ref);
            this.ptr->@base.add_ref = Marshal.GetFunctionPointerForDelegate(this.bs_add_ref);

            this.bs_release = new cef_base_t.release_delegate(this.release);
            this.ptr->@base.release = Marshal.GetFunctionPointerForDelegate(this.bs_release);

            this.bs_get_refct = new cef_base_t.get_refct_delegate(this.get_refct);
            this.ptr->@base.get_refct = Marshal.GetFunctionPointerForDelegate(this.bs_get_refct);

            this.bs_get_life_span_handler = new cef_client_t.get_life_span_handler_delegate(this.get_life_span_handler);
            this.ptr->get_life_span_handler = Marshal.GetFunctionPointerForDelegate(this.bs_get_life_span_handler);

            this.bs_get_load_handler = new cef_client_t.get_load_handler_delegate(this.get_load_handler);
            this.ptr->get_load_handler = Marshal.GetFunctionPointerForDelegate(this.bs_get_load_handler);

            this.bs_get_request_handler = new cef_client_t.get_request_handler_delegate(this.get_request_handler);
            this.ptr->get_request_handler = Marshal.GetFunctionPointerForDelegate(this.bs_get_request_handler);

            this.bs_get_display_handler = new cef_client_t.get_display_handler_delegate(this.get_display_handler);
            this.ptr->get_display_handler = Marshal.GetFunctionPointerForDelegate(this.bs_get_display_handler);

            this.bs_get_focus_handler = new cef_client_t.get_focus_handler_delegate(this.get_focus_handler);
            this.ptr->get_focus_handler = Marshal.GetFunctionPointerForDelegate(this.bs_get_focus_handler);

            this.bs_get_keyboard_handler = new cef_client_t.get_keyboard_handler_delegate(this.get_keyboard_handler);
            this.ptr->get_keyboard_handler = Marshal.GetFunctionPointerForDelegate(this.bs_get_keyboard_handler);

            this.bs_get_menu_handler = new cef_client_t.get_menu_handler_delegate(this.get_menu_handler);
            this.ptr->get_menu_handler = Marshal.GetFunctionPointerForDelegate(this.bs_get_menu_handler);

            this.bs_get_print_handler = new cef_client_t.get_print_handler_delegate(this.get_print_handler);
            this.ptr->get_print_handler = Marshal.GetFunctionPointerForDelegate(this.bs_get_print_handler);

            this.bs_get_find_handler = new cef_client_t.get_find_handler_delegate(this.get_find_handler);
            this.ptr->get_find_handler = Marshal.GetFunctionPointerForDelegate(this.bs_get_find_handler);

            this.bs_get_jsdialog_handler = new cef_client_t.get_jsdialog_handler_delegate(this.get_jsdialog_handler);
            this.ptr->get_jsdialog_handler = Marshal.GetFunctionPointerForDelegate(this.bs_get_jsdialog_handler);

            this.bs_get_jsbinding_handler = new cef_client_t.get_jsbinding_handler_delegate(this.get_jsbinding_handler);
            this.ptr->get_jsbinding_handler = Marshal.GetFunctionPointerForDelegate(this.bs_get_jsbinding_handler);

            this.bs_get_render_handler = new cef_client_t.get_render_handler_delegate(this.get_render_handler);
            this.ptr->get_render_handler = Marshal.GetFunctionPointerForDelegate(this.bs_get_render_handler);

        }

        ~CefClient()
        {
#if DIAGNOSTICS
            Cef.Logger.Trace(LogTarget.CefClient, this.ptr, "~CefClient");
#endif
			Dispose(false);
        }

        public void Dispose()
        {
		    if (this.RefCount == 0)
			{
			    Dispose(true);
				GC.SuppressFinalize(this);
			}
			else
			{
                this.disposed = true;
            }
        }

		protected virtual void Dispose(bool disposing)
        {
#if DIAGNOSTICS
            Cef.Logger.Trace(LogTarget.CefClient, this.ptr, LogOperation.Dispose, "Disposing=[{0}]", disposing);
#endif

			this.disposed = true;

			if (this.ptr != null)
            {
#if DIAGNOSTICS
                Interlocked.Decrement(ref ObjectCt);
#endif
				cef_client_t.Free(this.ptr);
                this.ptr = null;
			}

            if (disposing)
			{
			}
        }

        /// <summary>
        /// The AddRef method increments the reference count for the object.
		/// It should be called for every new copy of a pointer to a given object.
		/// The resulting reference count value is returned and should be used for diagnostic/testing purposes only.
        /// </summary>
        internal int AddRef()
        {
            var result = Interlocked.Increment(ref this.refct);
            #if DIAGNOSTICS
            Cef.Logger.Trace(LogTarget.CefClient, this.ptr, LogOperation.AddRef, "{0}", result);
            #endif
			if (result == 1)
			{
				pointers.Add((IntPtr)ptr, this);
			}
            return result;
        }

        /// <summary>
        /// The Release method decrements the reference count for the object.
		/// If the reference count on the object falls to 0, then the object should free itself from memory.
		/// The resulting reference count value is returned and should be used for diagnostic/testing purposes only.
        /// </summary>
        internal int ReleaseRef(bool disposing = true)
        {
            var result = Interlocked.Decrement(ref this.refct);
            #if DIAGNOSTICS
            Cef.Logger.Trace(LogTarget.CefClient, this.ptr, LogOperation.ReleaseRef, "{0}", result);
            #endif
			if (result == 0)
			{
                pointers.Remove((IntPtr)ptr);
			}
            return result;
        }

        /// <summary>
        /// Return the current number of references.
        /// </summary>
        internal int RefCount
        {
            get { return this.refct; }
        }

        internal cef_client_t* NativePointer
        {
            get { return this.ptr; }
        }

        internal cef_client_t* GetNativePointerAndAddRef()
        {
            AddRef();
            return this.ptr;
        }

        private int add_ref(cef_base_t* self)
        {
            ThrowIfObjectDisposed();
            return AddRef();
        }

        private int release(cef_base_t* self)
        {
            ThrowIfObjectDisposed();
            return ReleaseRef();
        }

        private int get_refct(cef_base_t* self)
        {
            ThrowIfObjectDisposed();
            return RefCount;
        }

        protected void ThrowIfObjectDisposed()
        {
            if (this.disposed) ThrowObjectDisposedException();
        }

        private static void ThrowObjectDisposedException()
        {
            throw new ObjectDisposedException("CefClient");
        }

		[Conditional("DEBUG")]
		private void CheckNativePointer()
		{
            if (this.ptr == null) ThrowObjectDisposedException();
		}
    }
}
